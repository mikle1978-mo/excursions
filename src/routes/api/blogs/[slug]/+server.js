// src/routes/api/places/[slug]/+server.js
import { json } from "@sveltejs/kit";
import { blogSteps as steps } from "$lib/components/admin/fields/blogs"; // ‚Üê –ø—Å–µ–≤–¥–æ–Ω–∏–º
import { mergeWithSchema } from "$lib/utils/mergeWithSchema";
import { mergeWithTranslations } from "$lib/utils/mergeWithTranslations";
import {
    getItemFromDB,
    updateItemInDB,
    deleteItemFromDB,
} from "$lib/server/utils/items/itemsService";
import { updateAllSocial, deleteAllSocial } from "$lib/server/social/index.js";

const type = "blogs";

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø–æ slug
 */
export async function GET({ params }) {
    try {
        const result = await getItemFromDB(params.slug, type);
        if (!result.item) return new Response(null, { status: 404 });

        // üü¢ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ —Å—Ö–µ–º–µ
        const schemaFields = steps.flatMap((step) => step.fields);

        // 1Ô∏è‚É£ –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å item
        const itemWithTranslations = mergeWithTranslations(
            result.item,
            result.translation,
            schemaFields
        );

        // 2Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω—è–µ–º mergeWithSchema
        const mergedItem = mergeWithSchema(schemaFields, itemWithTranslations);

        return json({ ...result, item: mergedItem }, { status: 200 });
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ${type}:`, err);
        return json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞
 */
export async function PUT({ request, params }) {
    try {
        const data = await request.json();
        const slug = await updateItemInDB(params.slug, data, type, steps);
        await updateAllSocial({ ...data, slug, type });
        return json({ success: true, slug }, { status: 200 });
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${type}:`, err);
        return json(
            { error: err.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
            { status: 500 }
        );
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞
 */
export async function DELETE({ params }) {
    try {
        await deleteAll({ slug });
        await deleteItemFromDB(params.slug, type);
        return json({ success: true }, { status: 200 });
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${type}:`, err);
        return json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
    }
}
