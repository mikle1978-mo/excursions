import { connectToDatabase } from "$lib/server/mongodb.js";
import {
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHANNEL_ID,
    TELEGRAM_CHANNEL_RU_ID,
} from "$env/static/private";

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
 */
function formatTelegramText({ title, description, url, lang }) {
    const readText = lang === "ru" ? "–ß–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ" : "Read on the website";

    return `üì∞ <b>${title}</b>\n\n${description}\n\nüëâ <a href="${url}">${readText}</a>`;
}

/**
 * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ Telegram (–≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞)
 */
export async function publishToTelegram({
    type,
    slug,
    title,
    description,
    url,
    url_ru,
}) {
    const db = await connectToDatabase();

    // –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —è–∑—ã–∫–∞–º
    const messages = {};

    // üá∑üá∫ –†—É—Å—Å–∫–∏–π –∫–∞–Ω–∞–ª
    if (title?.ru && description?.ru) {
        const resRu = await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHANNEL_RU_ID,
                    text: formatTelegramText({
                        title: title.ru,
                        description: description.ru,
                        url: url_ru,
                        lang: "ru",
                    }),
                    parse_mode: "HTML",
                    disable_web_page_preview: false,
                }),
            }
        );
        const dataRu = await resRu.json();
        if (dataRu.ok) messages.ru = dataRu.result.message_id;
        else console.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ RU:", dataRu);
    }

    // üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–∞–Ω–∞–ª
    if (title?.en && description?.en) {
        const resEn = await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHANNEL_ID,
                    text: formatTelegramText({
                        title: title.en,
                        description: description.en,
                        url: url,
                        lang: "en",
                    }),
                    parse_mode: "HTML",
                    disable_web_page_preview: false,
                }),
            }
        );
        const dataEn = await resEn.json();
        if (dataEn.ok) messages.en = dataEn.result.message_id;
        else console.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ EN:", dataEn);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ MongoDB
    await db
        .collection(type)
        .updateOne(
            { slug },
            { $set: { "social.telegram": messages } },
            { upsert: false }
        );

    return { success: true, messages };
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ Telegram
 */
export async function updateTelegramPost({
    type,
    slug,
    title,
    description,
    url,
}) {
    const db = await connectToDatabase();
    const item = await db.collection(type).findOne({ slug });
    const messages = item?.social?.telegram;
    if (!messages) return;

    // üá∑üá∫ –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ—Å—Ç
    if (messages.ru && title?.ru && description?.ru) {
        await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHANNEL_RU_ID,
                    message_id: messages.ru,
                    text: formatTelegramText({
                        title: title.ru,
                        description: description.ru,
                        url: url.replace("/en/", "/ru/"),
                    }),
                    parse_mode: "HTML",
                }),
            }
        );
    }

    // üá¨üáß –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ—Å—Ç
    if (messages.en && title?.en && description?.en) {
        await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHANNEL_ID,
                    message_id: messages.en,
                    text: formatTelegramText({
                        title: title.en,
                        description: description.en,
                        url: url.replace("/ru/", "/en/"),
                    }),
                    parse_mode: "HTML",
                }),
            }
        );
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram
 */
export async function deleteTelegramPost(type, slug) {
    const db = await connectToDatabase();
    const item = await db.collection(type).findOne({ slug });
    const messages = item?.social?.telegram;
    if (!messages) return;

    // üá∑üá∫ –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if (messages.ru) {
        await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/deleteMessage`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHANNEL_RU_ID,
                    message_id: messages.ru,
                }),
            }
        );
    }

    // üá¨üáß –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if (messages.en) {
        await fetch(
            `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/deleteMessage`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHANNEL_ID,
                    message_id: messages.en,
                }),
            }
        );
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
    await db
        .collection(type)
        .updateOne({ slug }, { $unset: { "social.telegram": "" } });
}
