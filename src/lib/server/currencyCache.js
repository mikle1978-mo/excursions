// src/lib/server/currencyCache.js
import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

// –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
const __filename = fileURLToPath(import.meta.url);

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞ ‚Äî –≤–Ω—É—Ç—Ä–∏ src/lib/server/cache
const CACHE_FILE = path.resolve("/tmp", "currencyCache.json");
console.log("üì¶ –ü—É—Ç—å –∫ –∫—ç—à—É:", CACHE_FILE);

async function ensureCacheDir() {
    try {
        await fs.mkdir(path.dirname(CACHE_FILE), { recursive: true });
    } catch (err) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—ç—à–∞:", err);
    }
}

export async function loadCache() {
    try {
        const data = await fs.readFile(CACHE_FILE, "utf-8");
        return JSON.parse(data);
    } catch (err) {
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à:", err.message);
        return null;
    }
}

export async function saveCache(data) {
    console.log("saveCache –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –¥–∞–Ω–Ω—ã–º–∏:", data);
    try {
        await ensureCacheDir();
        await fs.writeFile(CACHE_FILE, JSON.stringify(data, null, 2), "utf-8");
        console.log("‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à:", CACHE_FILE);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞:", err);
    }
}
