import { connectToDatabase } from "$lib/server/mongodb";
import { redis } from "$lib/server/redis";
import { SUPPORTED_LANGUAGES } from "$lib/constants/supportedLanguages";

const CACHE_TTL_SECONDS = 5; // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
function flattenFields(steps) {
    return steps.flatMap((step) => step.fields);
}

function isLocalizedField(name, steps) {
    return steps.some((step) =>
        step.fields.some((field) => field.name === name && field.localized)
    );
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 */
export async function invalidateFullItemCache(slug, collectionName) {
    const keys = await redis.keys(`fullItem_${collectionName}_${slug}_*`);
    if (keys.length) {
        await redis.del(keys);
    }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param {Object} data - –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param {String} collectionName - –∏–º—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 * @param {Array} steps - –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ —Ñ–æ—Ä–º—ã (–¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π)
 */
export async function createItemInDB(data, collectionName, steps) {
    const allFields = flattenFields(steps);

    // –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è)
    const mainDoc = {};
    for (const field of allFields) {
        if (!isLocalizedField(field.name, steps)) {
            mainDoc[field.name] = data[field.name] ?? field.default ?? null;
        }
    }

    if (typeof mainDoc.slug === "string") {
        mainDoc.slug = mainDoc.slug.trim().toLowerCase();
    } else {
        throw new Error("Slug –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    }

    mainDoc.createdAt = new Date();
    mainDoc.rating = 0;
    mainDoc.reviewsCount = 0;

    const db = await connectToDatabase();

    const exists = await db
        .collection(collectionName)
        .findOne({ slug: mainDoc.slug });
    if (exists) {
        throw new Error("–¢–∞–∫–æ–π slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    await db.collection(collectionName).insertOne(mainDoc);

    // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    const localizedFields = allFields.filter((f) =>
        isLocalizedField(f.name, steps)
    );

    const translations = SUPPORTED_LANGUAGES.map((lang) => {
        const t = { itemSlug: mainDoc.slug, lang };

        for (const field of localizedFields) {
            const value = data[field.name];

            if (Array.isArray(value) && field.type === "array") {
                // üîπ content –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                t[field.name] = value.map((item) => item?.[lang] || {});
            } else if (value && typeof value === "object") {
                // üîπ –æ–±—ã—á–Ω—ã–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (title, metaDescription –∏ —Ç.–ø.)
                t[field.name] = value[lang] ?? "";
            } else {
                // üîπ fallback
                t[field.name] = Array.isArray(field.default) ? [] : "";
            }
        }

        return t;
    });

    await db
        .collection(`${collectionName}_translations`)
        .insertMany(translations);
    await redis.del(collectionName);

    return mainDoc.slug;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ slug –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–æ —Å—Ö–µ–º–æ–π
 */
export async function getItemFromDB(slug, collectionName) {
    const db = await connectToDatabase();
    const item = await db.collection(collectionName).findOne({ slug });
    const translation = await db
        .collection(`${collectionName}_translations`)
        .find({ itemSlug: slug })
        .toArray();
    return { item, translation };
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è admin)
 */
export async function getFullItemFromDB(slug, collectionName, lang = "en") {
    const db = await connectToDatabase();

    const item = await db.collection(collectionName).findOne({ slug });
    if (!item) return null;

    const translations = await db
        .collection(`${collectionName}_translations`)
        .find({ itemSlug: slug })
        .toArray();

    const reviews = await db
        .collection("reviews")
        .find({ itemSlug: slug })
        .sort({ date: -1 })
        .toArray();

    const safeTranslations = translations.map((t) => ({
        ...t,
        _id: t._id.toString(),
    }));

    const safeReviews = reviews.map((r) => ({
        ...r,
        _id: r._id.toString(),
    }));

    const reviewsCount = safeReviews.length;
    const rating =
        reviewsCount > 0
            ? Math.round(
                  (reviews.reduce((sum, r) => sum + (r.rating || 0), 0) /
                      reviewsCount) *
                      10
              ) / 10
            : null;

    return {
        item: {
            ...item,
            _id: item._id.toString(),
            translations: safeTranslations,
        },
        reviews: safeReviews,
        reviewsCount,
        rating,
    };
}

/*–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–µ—à–µ–º */

export async function getFullItemCached(slug, collectionName, lang = null) {
    const cacheKey = `fullItem_${collectionName}_${slug}_${lang || "all"}`;

    // 1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –∫–µ—à–∞
    try {
        const cached = await redis.get(cacheKey);
        if (cached) {
            try {
                // –ï—Å–ª–∏ Upstash –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
                const str =
                    typeof cached === "string"
                        ? cached
                        : JSON.stringify(cached);
                console.log(`[Cache] –î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –∫–µ—à–∞: ${cacheKey}`);
                return JSON.parse(str);
            } catch (err) {
                console.warn(
                    `[Cache] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –∫–µ—à–µ: ${cacheKey}, —Å–±—Ä–æ—Å–∏–º`,
                    err
                );
                await redis.del(cacheKey); // —É–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä
            }
        }
    } catch (err) {
        console.error(`[Cache] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ Redis: ${cacheKey}`, err);
    }

    // 2Ô∏è‚É£ –î–æ—Å—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã
    const data = await getFullItemFromDB(slug, collectionName, lang);
    if (!data) return null;

    // 3Ô∏è‚É£ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function deepSafe(obj) {
        if (obj === null || typeof obj !== "object") return obj;
        if (obj instanceof Date) return obj.toISOString();
        if (obj._id) return { ...obj, _id: obj._id.toString() };
        if (Array.isArray(obj)) return obj.map(deepSafe);

        const res = {};
        for (const [key, value] of Object.entries(obj)) {
            res[key] = typeof value === "undefined" ? null : deepSafe(value);
        }
        return res;
    }

    const safeData = deepSafe(data);

    // 4Ô∏è‚É£ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–µ—à –∫–∞–∫ —Å—Ç—Ä–æ–∫—É JSON
    try {
        await redis.set(cacheKey, JSON.stringify(safeData), {
            ex: CACHE_TTL_SECONDS,
        });
        console.log(`[Cache] –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ Redis: ${cacheKey}`);
    } catch (err) {
        console.error(`[Cache] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∫–µ—à: ${cacheKey}`, err);
    }

    return safeData;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
 */
export async function updateItemInDB(slug, data, collectionName, steps) {
    const db = await connectToDatabase();
    const allFields = flattenFields(steps);

    const localizedFields = allFields.filter((f) =>
        isLocalizedField(f.name, steps)
    );

    // –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (–±–µ–∑ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π)
    const mainDoc = { ...data };
    for (const field of localizedFields) {
        delete mainDoc[field.name];
    }

    if (data.slug && data.slug !== slug) {
        mainDoc.slug = data.slug.trim().toLowerCase();
    }

    await db.collection(collectionName).updateOne({ slug }, { $set: mainDoc });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    await db
        .collection(`${collectionName}_translations`)
        .deleteMany({ itemSlug: slug });

    const translations = SUPPORTED_LANGUAGES.map((lang) => {
        const t = { itemSlug: mainDoc.slug, lang };

        for (const field of localizedFields) {
            const value = data[field.name];

            if (Array.isArray(value) && field.type === "array") {
                // üîπ content –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                t[field.name] = value.map((item) => item?.[lang] || {});
            } else if (value && typeof value === "object") {
                // üîπ –æ–±—ã—á–Ω—ã–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (title, metaDescription –∏ —Ç.–ø.)
                t[field.name] = value[lang] ?? "";
            } else {
                // üîπ fallback
                t[field.name] = Array.isArray(field.default) ? [] : "";
            }
        }

        return t;
    });

    await db
        .collection(`${collectionName}_translations`)
        .insertMany(translations);
    await redis.del(collectionName);
    await invalidateFullItemCache(slug, collectionName);

    return mainDoc.slug || slug;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
 */
export async function deleteItemFromDB(slug, collectionName) {
    const db = await connectToDatabase();
    await db.collection(collectionName).deleteOne({ slug });
    await db
        .collection(`${collectionName}_translations`)
        .deleteMany({ itemSlug: slug });
    await redis.del(collectionName);
    await invalidateFullItemCache(slug, collectionName);
    return true;
}
